{
  "name": "Materialdrawer",
  "tagline": "The flexible, easy to use, all in one drawer library for your Android project.",
  "body": "#MaterialDrawer  [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.mikepenz/materialdrawer/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.mikepenz/materialdrawer) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-MaterialDrawer-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1526) [![Join the chat at https://gitter.im/mikepenz/MaterialDrawer](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mikepenz/MaterialDrawer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n![MaterialDrawer the flexible, easy to use, all in one drawer library for your android project.](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/develop/DEV/github/banner.png)\r\n\r\n> Does your application **contain a Drawer**? Do you want to have it **up and running in less than 5 minutes**? Do you want your drawer to follow the **Android Design Guidelines**?\r\nDo you have **profiles**? Do you need **flexibility**? Is Google's navigation Drawer of the **design support** not enough for you? Do you want a **simple and easy** to understand api?\r\n\r\nIf any (or all) of these questions seem familiar, the **MaterialDrawer** is the perfect library for you.\r\n\r\n**Never** waste your time again.\r\nIt provides you with the easiest possible implementation of a navigation drawer for your application.\r\nThere  is a Header with profiles (**AccountHeader**), a **MiniDrawer** for Tablets (like Gmail), provide\r\n**custom DrawerItems**, **custom colors**, **custom themes**, ... **No limits** for customizations.\r\n\r\n###A quick overview what's in\r\n- **the easiest possible integration**\r\n- integrate in less than **5 minutes**\r\n- compatible down to **API Level 10**\r\n- includes an **AccountSwitcher**\r\n- quick and simple api\r\n- follows the **Google Material Design Guidelines**\r\n- use **vector** (.svg) icons and **icon fonts** via the [Android-Iconics](https://github.com/mikepenz/Android-Iconics) integration\r\n - **Google Material Design Icons**, Google **Material Community** Design Icons, FontAwesome and more\r\n- comes with various **themes** which help to get your own themes clean\r\n- modify the colors on the go\r\n- **uses the AppCompat support library**\r\n- comes with multiple default drawer items\r\n- based on a **RecyclerView**\r\n- **RTL** support\r\n- Gmail like **MiniDrawer**\r\n- expandable items\r\n- **badge** support\r\n- define custom drawer items\r\n- tested and **stable**\r\n- sticky footer or headers\r\n- **absolutely NO limits**\r\n\r\n> If you upgrade from < 5.0.0 follow the [MIGRATION GUIDE](https://github.com/mikepenz/MaterialDrawer/blob/develop/MIGRATION.md)\r\n\r\n#Preview\r\n##Demo\r\nYou can try it out here [Google Play](https://play.google.com/store/apps/details?id=com.mikepenz.unsplash) (wall:splash an open source application which uses this drawer implementation). Or you try the [Sample Application](https://play.google.com/store/apps/details?id=com.mikepenz.materialdrawer.app)\r\n\r\n##Screenshots\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/develop/DEV/github/screenshots1.jpg)\r\n![Image](https://raw.githubusercontent.com/mikepenz/MaterialDrawer/develop/DEV/github/screenshots2.jpg)\r\n\r\n#WIKI / FAQ\r\nYou can find some frequently asked questions and other resources in the [WIKI / FAQ](FAQ.md) site.\r\n\r\n#Setup\r\n##1. Provide the gradle dependency\r\n\r\n```gradle\r\ncompile('com.mikepenz:materialdrawer:5.3.6@aar') {\r\n\ttransitive = true\r\n}\r\n```\r\n\r\n##2. Add your drawer\r\n```java\r\nnew DrawerBuilder().withActivity(this).build();\r\n```\r\n\r\nGreat. Your drawer is now ready to use.\r\n\r\n\r\n#Additional Setup\r\n##Add items and adding some functionality\r\n\r\n```java\r\n//if you want to update the items at a later time it is recommended to keep it in a variable\r\nPrimaryDrawerItem item1 = new PrimaryDrawerItem().withIdentifier(1).withName(R.string.drawer_item_home);\r\nSecondaryDrawerItem item2 = new SecondaryDrawerItem().withIdentifier(2).withName(R.string.drawer_item_settings);\r\n\r\n//create the drawer and remember the `Drawer` result object\r\nDrawer result = new DrawerBuilder()\r\n    .withActivity(this)\r\n    .withToolbar(toolbar)\r\n    .addDrawerItems(\r\n\t    item1,\r\n\t    new DividerDrawerItem(),\r\n\t    item2,\r\n\t    new SecondaryDrawerItem().withName(R.string.drawer_item_settings)\r\n    )\r\n    .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {\r\n        @Override\r\n        public boolean onItemClick(View view, int position, IDrawerItem drawerItem) {\r\n    \t    // do something with the clicked item :D\r\n        }\r\n    })\r\n    .build();\r\n```\r\n\r\n##Selecting an item\r\n```java\r\n//set the selection to the item with the identifier 1\r\nresult.setSelection(1);\r\n//set the selection to the item with the identifier 2\r\nresult.setSelection(item2);\r\n//set the selection and also fire the `onItemClick`-listener\r\nresult.setSelection(1, true);\r\n```\r\n\r\nBy default, when a drawer item is clicked, it becomes the new selected item. If this isn't the expected behavior,\r\nyou can disable it for this item using `withSelectable(false)`:\r\n```java\r\nnew SecondaryDrawerItem().withName(R.string.drawer_item_dialog).withSelectable(false)\r\n```\r\n\r\n##Modify items or the drawer\r\n\r\n```java\r\n//modify an item of the drawer\r\nitem1.withName(\"A new name for this drawerItem\").withBadge(\"19\").withBadgeStyle(new BadgeStyle().withTextColor(Color.WHITE).withColorRes(R.color.md_red_700));\r\n//notify the drawer about the updated element. it will take care about everything else\r\nresult.updateItem(item1);\r\n\r\n//to update only the name, badge, icon you can also use one of the quick methods\r\nresult.updateName(1, \"A new name\");\r\n\r\n//the result object also allows you to add new items, remove items, add footer, sticky footer, ..\r\nresult.addItem(new DividerDrawerItem());\r\nresult.addStickyFooterItem(new PrimaryDrawerItem().withName(\"StickyFooterItem\"));\r\n\r\n//remove items with an identifier\r\nresult.removeItem(2);\r\n\r\n//open / close the drawer\r\nresult.openDrawer();\r\nresult.closeDrawer();\r\n\r\n//get the reference to the `DrawerLayout` itself\r\nresult.getDrawerLayout();\r\n```\r\n\r\n##Add profiles and an AccountHeader\r\n```java\r\n// Create the AccountHeader\r\nAccountHeader headerResult = new AccountHeaderBuilder()\r\n\t.withActivity(this)\r\n    .withHeaderBackground(R.drawable.header)\r\n\t.addProfiles(\r\n\t\tnew ProfileDrawerItem().withName(\"Mike Penz\").withEmail(\"mikepenz@gmail.com\").withIcon(getResources().getDrawable(R.drawable.profile))\r\n\t)\r\n    .withOnAccountHeaderListener(new AccountHeader.OnAccountHeaderListener() {\r\n\t\t@Override\r\n\t\tpublic boolean onProfileChanged(View view, IProfile profile, boolean currentProfile) {\r\n\t\t    return false;\r\n\t\t}\r\n\t})\r\n\t.build();\r\n\r\n//Now create your drawer and pass the AccountHeader.Result\r\nnew DrawerBuilder()\r\n    .withAccountHeader(headerResult)\r\n    //additional Drawer setup as shown above\r\n    ...\r\n    .build();\r\n\r\n```\r\n\r\n##Use the included icon font\r\nThe MaterialDrawer comes with the `core` of the [Android-Iconics](https://github.com/mikepenz/Android-Iconics) library. This allows you to create your `DrawerItems` with an icon from any font.\r\n\r\nChoose the fonts you need. [Available Fonts](https://github.com/mikepenz/Android-Iconics#2-choose-your-desired-fonts)\r\n**build.gradle**\r\n```gradle\r\ncompile 'com.mikepenz:google-material-typeface:x.y.z@aar' //Google Material Icons\r\ncompile 'com.mikepenz:fontawesome-typeface:x.y.z@aar'     //FontAwesome\r\n```\r\n\r\n**java**\r\n```java\r\n//now you can simply use any icon of the Google Material Icons font\r\nnew PrimaryDrawerItem().withIcon(GoogleMaterial.Icon.gmd_wb_sunny)\r\n//Or an icon from FontAwesome\r\nnew SecondaryDrawerItem().withIcon(FontAwesome.Icon.faw_github)\r\n```\r\n\r\n#Advanced Setup\r\n##Activity with ActionBar\r\n###Code:\r\n```java\r\nnew DrawerBuilder()\r\n\t.withActivity(this)\r\n\t.withTranslucentStatusBar(false)\r\n    .withActionBarDrawerToggle(false)\r\n\t.addDrawerItems(\r\n\t\t//pass your items here\r\n\t)\r\n\t.build();\r\n```\r\n\r\n##Activity with Multiple Drawers\r\n###Code:\r\n```java\r\nDrawer result = new DrawerBuilder()\r\n\t.withActivity(this)\r\n\t.withToolbar(toolbar)\r\n\t.addDrawerItems(\r\n\t\t//pass your items here\r\n\t)\r\n\t.build();\r\n\r\nnew DrawerBuilder()\r\n\t.withActivity(this)\r\n    .addDrawerItems(\r\n    \t//pass your items here\r\n    )\r\n    .withDrawerGravity(Gravity.END)\r\n    .append(result);\r\n```\r\n\r\n##Load images via url\r\nThe MaterialDrawer supports fetching images from URLs and setting them for the Profile icons. As the MaterialDrawer does not contain an ImageLoading library\r\nthe dev can choose his own implementation (Picasso, Glide, ...). This has to be done, before the first image should be loaded via URL. (Should be done in the Application, but any other spot before loading the first image is working too)\r\n* SAMPLE using [PICASSO](https://github.com/square/picasso)\r\n* [SAMPLE](https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/java/com/mikepenz/materialdrawer/app/CustomApplication.java) using [GLIDE](https://github.com/bumptech/glide)\r\n\r\n###Code:\r\n```java\r\n//initialize and create the image loader logic\r\nDrawerImageLoader.init(new AbstractDrawerImageLoader() {\r\n    @Override\r\n    public void set(ImageView imageView, Uri uri, Drawable placeholder) {\r\n        Picasso.with(imageView.getContext()).load(uri).placeholder(placeholder).into(imageView);\r\n    }\r\n\r\n    @Override\r\n    public void cancel(ImageView imageView) {\r\n        Picasso.with(imageView.getContext()).cancelRequest(imageView);\r\n    }\r\n\r\n    /*\r\n    @Override\r\n    public Drawable placeholder(Context ctx) {\r\n        return super.placeholder(ctx);\r\n    }\r\n\r\n    @Override\r\n    public Drawable placeholder(Context ctx, String tag) {\r\n        return super.placeholder(ctx, tag);\r\n    }\r\n    */\r\n});\r\n```\r\n\r\nAn implementation with [GLIDE](https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/java/com/mikepenz/materialdrawer/app/CustomApplication.java#L42) can be found in the sample application\r\n\r\n\r\n##Switching between Back-Arrow or Hamburger-Icon\r\nIf you use the included ActionBarDrawerToggle you can switch between back-arrow or hamburger-icon\r\nwith the following code snippet. (Please note that the order of these lines matter)\r\n###Code - Show the back arrow:\r\n```java\r\nresult.getActionBarDrawerToggle().setDrawerIndicatorEnabled(false);\r\ngetSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n```\r\n###Code - Show the hamburger icon:\r\n```java\r\ngetSupportActionBar().setDisplayHomeAsUpEnabled(false);\r\nresult.getActionBarDrawerToggle().setDrawerIndicatorEnabled(true);\r\n```\r\n\r\n\r\n##AndroidManifest.xml\r\nThe **MaterialDrawer** requires an `AppCompat` theme or a derivative theme like the `MaterialDrawerTheme`s as base. It is highly recommended to use one of the provided themes. They all use the `AppCompat` theme as parent and define the color values for the drawer.\r\n\r\n**NOTE:** The theme states ActionBar and not NoActionBar like the Appcompat style\r\n\r\n- **MaterialDrawerTheme** (extends Theme.AppCompat.NoActionBar)\r\n- **MaterialDrawerTheme.TranslucentStatus**\r\n- **MaterialDrawerTheme.ActionBar** (extends Theme.AppCompat)\r\n- **MaterialDrawerTheme.ActionBar.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light** (extends Theme.AppCompat.Light.NoActionBar)\r\n- **MaterialDrawerTheme.Light.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light.ActionBar** (extends Theme.AppCompat.Light)\r\n- **MaterialDrawerTheme.Light.ActionBar.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light.DarkToolbar** (extends Theme.AppCompat.DarkActionBar) (disabled the ActionBar)\r\n- **MaterialDrawerTheme.Light.DarkToolbar.TranslucentStatus**\r\n- **MaterialDrawerTheme.Light.DarkToolbar.ActionBar** (extends Theme.AppCompat.DarkActionBar)\r\n- **MaterialDrawerTheme.Light.DarkToolbar.ActionBar.TranslucentStatus**\r\n  \r\n\r\n##Style the drawer\r\n### Use of a none MaterialDrawer.* style\r\nIf you don't use one of the provided styles you have to add the style values to your style. Here's a simple sample. \r\nThis is the same as the Custom style just with a parent like `parent=\"Theme.AppCompat.Light.DarkActionBar\"`\r\n### Custom style - styles.xml\r\nCreate your custom style and use one of the provided themes as parent. If you don't need a custom theme see the next section, how you can set the colors just by overwriting the original colors.\r\n\r\n```xml\r\n    <style name=\"CustomTheme\" parent=\"MaterialDrawerTheme\">\r\n        <!-- ...and here we setting appcompat’s color theming attrs -->\r\n        <item name=\"colorPrimary\">@color/material_drawer_primary</item>\r\n        <item name=\"colorPrimaryDark\">@color/material_drawer_primary_dark</item>\r\n        <item name=\"colorAccent\">@color/material_drawer_accent</item>\r\n\r\n        <!-- MaterialDrawer specific values -->\r\n        <item name=\"material_drawer_background\">@color/material_drawer_background</item>\r\n        <item name=\"material_drawer_primary_text\">@color/material_drawer_primary_text</item>\r\n        <item name=\"material_drawer_primary_icon\">@color/material_drawer_primary_icon</item>\r\n        <item name=\"material_drawer_secondary_text\">@color/material_drawer_secondary_text</item>\r\n        <item name=\"material_drawer_hint_text\">@color/material_drawer_hint_text</item>\r\n        <item name=\"material_drawer_divider\">@color/material_drawer_divider</item>\r\n        <item name=\"material_drawer_selected\">@color/material_drawer_selected</item>\r\n        <item name=\"material_drawer_selected_text\">@color/material_drawer_selected_text</item>\r\n        <item name=\"material_drawer_header_selection_text\">@color/material_drawer_header_selection_text</item>\r\n    </style>\r\n```\r\n\r\n## Custom colors - colors.xml\r\nNo need to create a custom theme. Just set these colors (or some of them) and you have your own style.\r\n```xml\r\n\t<!-- Material DEFAULT colors -->\r\n    <color name=\"material_drawer_primary\">#2196F3</color>\r\n    <color name=\"material_drawer_primary_dark\">#1976D2</color>\r\n    <color name=\"material_drawer_primary_light\">#BBDEFB</color>\r\n    <color name=\"material_drawer_accent\">#FF4081</color>\r\n    \r\n    <!-- OVERWRITE THESE COLORS FOR A LIGHT THEME -->\r\n    <!-- MaterialDrawer DEFAULT colors -->\r\n    <color name=\"material_drawer_background\">#F9F9F9</color>\r\n    <!-- Material DEFAULT text / items colors -->\r\n    <color name=\"material_drawer_primary_text\">#DE000000</color>\r\n    <color name=\"material_drawer_primary_icon\">#8A000000</color>\r\n    <color name=\"material_drawer_secondary_text\">#8A000000</color>\r\n    <color name=\"material_drawer_hint_text\">#42000000</color>\r\n    <color name=\"material_drawer_divider\">#1F000000</color>\r\n    <!-- Material DEFAULT drawer colors -->\r\n    <color name=\"material_drawer_selected\">#E8E8E8</color>\r\n    <color name=\"material_drawer_selected_text\">#2196F3</color>\r\n    <color name=\"material_drawer_header_selection_text\">#FFF</color>\r\n    \r\n    <!-- OVERWRITE THESE COLORS FOR A DARK THEME -->\r\n    <!-- MaterialDrawer DEFAULT DARK colors -->\r\n    <color name=\"material_drawer_dark_background\">#303030</color>\r\n    <!-- MaterialDrawer DEFAULT DARK text / items colors -->\r\n    <color name=\"material_drawer_dark_primary_text\">#DEFFFFFF</color>\r\n    <color name=\"material_drawer_dark_primary_icon\">#8AFFFFFF</color>\r\n    <color name=\"material_drawer_dark_secondary_text\">#8AFFFFFF</color>\r\n    <color name=\"material_drawer_dark_hint_text\">#42FFFFFF</color>\r\n    <color name=\"material_drawer_dark_divider\">#1FFFFFFF</color>\r\n    <!-- MaterialDrawer DEFAULT DARK drawer colors -->\r\n    <color name=\"material_drawer_dark_selected\">#202020</color>\r\n    <color name=\"material_drawer_dark_selected_text\">@color/material_drawer_primary</color>\r\n    <color name=\"material_drawer_dark_header_selection_text\">#FFF</color>\r\n```\r\n\r\n#FAQ\r\n###How can i create a drawer without a default selection\r\n```java\r\n//just use this with the Drawer\r\n.withSelectedItem(-1)\r\n```\r\n\r\n###I have problems with the SoftKeyboard. How can i fix this?\r\nThe MaterialDrawer will display your activity as FullScreen. Starting with API 19\r\nthe `adjustResize` works different then. This is default Android behavior. \r\nThis is a big issue for a lot of devs so i've created a helper which \"fixes\" this issue. \r\n(It is recommend to just enable it for activities / fragments which need it)\r\n```java\r\n.keyboardSupportEnabled(activity, enabled)\r\n```\r\nA additional workaround is to disable the translucent StatusBar (This will break the\r\ndrawer to be displayed under the StatusBar). `.withTranslucentStatusBar(false)`\r\n\r\nYou can read about this here: https://github.com/mikepenz/MaterialDrawer/issues/95, https://github.com/mikepenz/MaterialDrawer/issues/183, https://github.com/mikepenz/MaterialDrawer/issues/196\r\n\r\n###Can I lock the Drawer\r\nAs the MaterialDrawer will just create a normal DrawerLayout (with some magic around it) everything a normal\r\nDrawerLayout can do is also available in the MaterialDrawer. \r\n```java\r\n//get the DrawerLayout from the Drawer\r\nDrawerLayout drawerLayout = result.getDrawerLayout();\r\n//do whatever you want with the Drawer. Like locking it. \r\ndrawerLayout.setDrawerLockMode(int lockMode); //or (int lockMode, int edgeGravity)\r\n```\r\n\r\n###Can I use my own DrawerLayout implementation\r\nMaterialDrawer allows you to use a compatible implementation of MaterialDrawer.\r\nPlease note that the provided layout must follow the same structure as the `MaterialDrawer` internal one.\r\n\r\nStart by copying the [`material_drawer.xml`](https://github.com/mikepenz/MaterialDrawer/blob/develop/library/src/main/res/layout/material_drawer.xml)\r\nfile inside your project, and replace `android.support.v4.widget.DrawerLayout` with the fully qualified name of your class\r\n(`com.yourapp.com.ui.CustomDrawerLayout` for example). Please note that your class must extend the original DrawerLayout.\r\n\r\nYou'll then be able to use this custom class:\r\n```java\r\nbuilder.withDrawerLayout(R.layout.material_drawer);\r\n```\r\n\r\n#Apps using the MaterialDrawer\r\n(feel free to send me new projects)\r\n\r\n* [wall:splash](https://play.google.com/store/apps/details?id=com.mikepenz.unsplash)\r\n* [GitSkarios](https://play.google.com/store/apps/details?id=com.alorma.github)\r\n* [Screener](https://play.google.com/store/apps/details?id=de.toastcode.screener)\r\n* [Academic Schedule](https://play.google.com/store/apps/details?id=com.auebcsschedule.ppt)\r\n* [Strength](https://play.google.com/store/apps/details?id=com.e13engineering.strength)\r\n* [Sprit Club](https://play.google.com/store/apps/details?id=at.idev.spritpreise)\r\n* [FitHub](https://play.google.com/store/apps/details?id=com.gabilheri.fithub)\r\n* [StickyNotes](https://play.google.com/store/apps/details?id=com.jsvmsoft.stickynotes)\r\n* [Smartphone Italia](https://play.google.com/store/apps/details?id=rebus.smartphone.italia)\r\n* [MLManager](https://github.com/javiersantos/MLManager)\r\n* [Hold'Em Poker Manager](https://play.google.com/store/apps/details?id=pt.massena.holdemtracker.free)\r\n* [Fimpl](https://play.google.com/store/apps/details?id=com.danielZET.fimpl)\r\n* [+UEA](https://play.google.com/store/apps/details?id=br.edu.uea.app)\r\n* [PixCell8](https://play.google.com/store/apps/details?id=com.pixcell8.prod)\r\n* [TS3 Viewer for TeamSpeak 3](https://play.google.com/store/apps/details?id=com.game_state.ts3viewer)\r\n* [Teacher Gradebook](https://play.google.com/store/apps/details?id=com.apolosoft.cuadernoprofesor)\r\n* [Tabe3 News Reader](https://play.google.com/store/apps/details?id=com.tabe3.news)\r\n* [Facepunch Droid](https://play.google.com/store/apps/details?id=com.apps.anker.facepunchdroid)\r\n* [World Tourist Attractions](https://play.google.com/store/apps/details?id=indian.fig.whatsaround)\r\n* [HipCar](https://play.google.com/store/apps/details?id=com.hipcar.android)\r\n* [AS Sales Management](https://play.google.com/store/apps/details?id=com.armsoft.mtrade)\r\n\r\n#Articles about the MaterialDrawer\r\n* [java-help.ru](http://java-help.ru/material-navigationdrawer/)\r\n\r\n\r\n#Credits\r\n\r\n- Mirosław Stanek - [GitHub](https://github.com/frogermcs)\r\n\t- For his InstaMaterial concept and the idea of inflating the drawerLayout [InstaMaterial Concept](http://frogermcs.github.io/InstaMaterial-concept-part-7-navigation-drawer/)\r\n\r\n- Lunae Luman - [Behance](https://www.behance.net/gallery/18526001/Material-Wallpaper) for the Header Image\r\n\r\n#Developed By\r\n\r\n* Mike Penz \r\n * [mikepenz.com](http://mikepenz.com) - <mikepenz@gmail.com>\r\n * [paypal.me/mikepenz](http://paypal.me/mikepenz)\r\n\r\n\r\n#License\r\n\r\n    Copyright 2016 Mike Penz\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n",
  "google": "UA-56332427-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}